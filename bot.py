import os

from pyrogram import filters
from datetime import datetime 

from main import *
from another import *
from config import botur , cursor , lang , owner_id , zam_id
from main.clava_obra import clava


@botur.on_message(filters.command('start'))
def da(bot,message):
    if sub_check(bot,message.from_user.id) and not check_ban(message.from_user.id):
        lan=cursor.execute('SELECT * FROM users WHERE id =?',(message.from_user.id,)).fetchone()
        if lan == None:
            cursor.execute('INSERT INTO users VALUES (?)',(message.from_user.id))
            lang.commit()
            da(bot,message)
        else:
            bot.send_message(message.chat.id,f'‚úã > –ü—Ä–∏–≤–µ—Ç , {message.from_user.first_name}\nüëÆ > –Ø –º–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ 3 –±–∞–∑–∞–º –Ω–∞ —Å–∫–∞–º.\nüÜî > –¢–≤–æ–π ID: {message.from_user.id}\n‚ùóÔ∏è > –ó–∞ –ø–æ–º–æ—â—å—é –ø–∏—à–∏ - /help',reply_markup=klava_ru1)
    else:
        clava_sub(bot,message)


@botur.on_message(filters.command('check'))
def check_1(bot,message):
    if sub_check(bot,message.from_user.id) and not check_ban(message.from_user.id):
        try:
            lan = cursor.execute('SELECT * FROM users WHERE id =?',(message.from_user.id,)).fetchone()[0]
        except TypeError:
            cursor.execute('INSERT INTO users VALUES (?)',(message.from_user.id))
            lang.commit()
            lan = cursor.execute('SELECT * FROM users WHERE id =?',(message.from_user.id,)).fetchone()[0]
        except AttributeError:
            lan = cursor.execute('SELECT * FROM users WHERE id =?',(message.from_user.id,)).fetchone()[0]
            lang.commit()
        finally:
            arg = check(bot,message)
            check_reestr(bot,message)
            check_prepiska(bot,message)
            vnos_v_basy(message.from_user.id,arg)         
    else:
        clava_sub(bot,message)
        
    


@botur.on_message(filters.command('info'))
def info(bot,message):
    if sub_check(bot,message.from_user.id) and not check_ban(message.from_user.id):
        lan=cursor.execute('SELECT * FROM users WHERE id =?',(message.from_user.id,)).fetchone()
        if lan == None:
            cursor.execute('INSERT INTO users VALUES (?)',(message.from_user.id,))
            lang.commit()
            info(bot,message)
        else:
            subs = cursor.execute('SELECT COUNT(id) FROM users').fetchone()[0]
            zapos = cursor.execute('SELECT COUNT(id_check) FROM logi').fetchone()[0]
            bot.send_message(message.chat.id,f'> üïí –° —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ {(datetime.now() - datetime(2024, 1,20)).days} –¥–Ω–µ–π \n\n> üìà –í–µ—Ä—Å–∏—è 1.5 \n\n> üîé –ú–Ω–æ–π –ø–æ–ª—å–∑—É—é—Ç—Å—è {subs} —á–µ–ª–æ–≤–µ–∫\n\n> üí¨ –ö–æ –º–Ω–µ –æ–±—Ä–∞—â–∞–ª–∏—Å—å {zapos} —Ä–∞–∑\n\n> ‚úÖ –í –Ω–∞—à–µ–º —Ä–µ–µ—Å—Ç—Ä–µ  {find_number_garants()} –≥–∞—Ä–∞–Ω—Ç–æ–≤\n\n> üëá –í–æ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–µ—Ü',reply_markup=klava_ru2)
    else:
        clava_sub(bot,message)
@botur.on_message(filters.command('help'))
def help(bot,message):
    if sub_check(bot,message.from_user.id) and not check_ban(message.from_user.id):
        lan=cursor.execute('SELECT * FROM users WHERE id =?',(message.from_user.id,)).fetchone()
        if lan == None:
            cursor.execute('INSERT INTO users VALUES (?,?)',(message.from_user.id,))
            lang.commit()
            help(bot,message)
        else:
            bot.send_message(message.chat.id,'–°–º–æ—Ç—Ä–∏ —á—Ç–æ –º–æ–≥—É!\n| /start > –ó–∞–ø—É—Å–∫\n| /info > –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è \n| /check (id/@) > –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é \n| /me > –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è.\n| /history > –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ \n| /garants > –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ –≥–∞—Ä–∞–Ω—Ç–æ–≤')
    else:
        clava_sub(bot,message)
        


@botur.on_message(filters.command('me'))
def check_u(bot,message):
    if sub_check(bot,message.from_user.id) and not check_ban(message.from_user.id):
        try:
            lan = cursor.execute('SELECT * FROM users WHERE id =?',(message.from_user.id,)).fetchone()[0]
        except TypeError:
            cursor.execute('INSERT INTO users VALUES (?)',(message.from_user.id,))
            lang.commit() 
            lan = cursor.execute('SELECT * FROM users WHERE id =?',(message.from_user.id,)).fetchone()[0]
        finally:
            arg = check_you(bot,message)
            check_resster_me(bot,message)
            check_prepiska_me(bot,message)
            vnos_v_basy(message.from_user.id,arg)
    else:
        clava_sub(bot,message)
@botur.on_message(filters.command('history'))
def history(bot,message):
    if sub_check(bot,message.from_user.id) and not check_ban(message.from_user.id):
        try:
            lan = cursor.execute('SELECT * FROM users WHERE id =?',(message.from_user.id,)).fetchone()[0]
        except:
            cursor.execute('INSERT INTO users VALUES (?)',(message.from_user.id))
            lang.commit()
            history(bot,message)
        finally:
            bot.send_message(message.chat.id,'üìã –ò—â—É —Ç–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã...')
            txt_file(message.from_user.id)
            bot.send_document(message.chat.id, f"id_{message.from_user.id}.txt", caption="‚úèÔ∏è –í–æ—Ç —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤!")
            os.remove(f'id_{message.from_user.id}.txt')  
    else:
        clava_sub(bot,message)
@botur.on_message(filters.command('garants'))
def listur(bot,message):
    if sub_check(bot,message.from_user.id) and not check_ban(message.from_user.id):
        send_reestr(bot,message)
    else:
        clava_sub(bot,message)
@botur.on_message(filters.command('send'))
def rasskilka(bot,message):
    if message.from_user.id == owner_id:
        all_sends = 0
        all_users = cursor.execute('SELECT id FROM users').fetchall()
        text=" ".join(message.text.split()[1:])
        for i in all_users[::-1]:
            try:
                bot.send_message(i[0],text)
                all_sends += 1
            except:
                pass
        bot.send_message(message.chat.id,f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ—á–µ–Ω–∞ —è –ø–µ—Ä–µ—Å–ª–∞–ª {all_sends}')

@botur.on_message(filters.command('ban'))
def banned(bot,message):
    if message.from_user.id ==  owner_id:
        try:
            id = int(message.text.split()[1])
            bot.send_message(message.chat.id, ban(id) )
        except ValueError:
            bot.send_message(message.chat.id,'‚ùóÔ∏è –ú–Ω–µ –∞–π–¥–∏ –Ω—É–∂–µ–Ω –¥–ª—è –±–∞–Ω–∞ ‚ùóÔ∏è ')
    else:
        bot.send_message(message.chat.id,'‚ùå –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ ‚ùå')
@botur.on_message(filters.command('unban'))
def banned(bot,message):
    if message.from_user.id == owner_id:
        try:
            id = int(message.text.split()[1])
            bot.send_message(message.chat.id, unban(id) )
        except ValueError:
            bot.send_message(message.chat.id,'‚ùóÔ∏è –ú–Ω–µ –∞–π–¥–∏ –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ ‚ùóÔ∏è ')
    else:
        bot.send_message(message.chat.id,'‚ùå –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ ‚ùå')
@botur.on_message(filters.command('addgarant'))
def add_garant1(bot,message):
    if message.from_user.id == owner_id or message.from_user.id == zam_id:
        try:
            da = message.text.split('|')
            id_g , baza , proofs = da[1].strip() , da[2].strip() , da[3].strip()
            if id_g[0] == '@':
                id_g = bot.get_users(user_ids=id_g).id
            bot.send_message(message.chat.id,add_garant(id_g,baza,proofs))
        except IndexError:
            bot.send_message(message.chat.id,'‚ùóÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–Ω –∞–≥—Ä—É–º–µ–Ω—Ç ‚ùóÔ∏è')

@botur.on_message(filters.command('delgarant'))
def del_garant1(bot,message):
    if message.from_user.id == owner_id or message.from_user.id == zam_id:
        try:
            arg = message.text.split()[1]
            if arg[0] == '@':
                arg = bot.get_users(user_ids=arg).id
            bot.send_message(message.chat.id,delete_garant(arg))
        except IndexError:
            bot.send_message(message.chat.id,'‚ùóÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–Ω –∞–≥—Ä—É–º–µ–Ω—Ç ‚ùóÔ∏è')

@botur.on_message(filters.group)
def da_i(bot,message):
    check_scam(bot,message)
    if sub_check(bot,message.from_user.id) and not check_ban(message.from_user.id):
        clava(bot,message)
@botur.on_message()
def d(bot,message):
    if sub_check(bot,message.from_user.id) and not check_ban(message.from_user.id):
        clava(bot,message)


app.start()
botur.run()

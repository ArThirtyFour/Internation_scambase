from random import choice
from time import sleep
from pyrogram import Client
from pyrogram.errors import UsernameNotOccupied
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import *
from main import klava_resstr

    

chat_ids = [ ]
slovo_garant = ['–Ø–≤–ª—è–µ—Ç—Å—è ü•â–ú–∏–Ω–∏-–ì–∞—Ä–∞–Ω—Ç–æ–º','–Ø–≤–ª—è–µ—Ç—Å—è ü•à–û–±—ã—á–Ω—ã–º –ì–∞—Ä–∞–Ω—Ç–æ–º','–†–µ–ø—É—Ç–∞—Ü–∏—è: –ì–∞—Ä–∞–Ω—Ç','–ï–º—É –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å']
slovo_scam = ['–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ SCAM –±–∞–∑–µ!','| –î–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, —è–≤–ª—è–µ—Ç—Å—è –°–ö–ê–ú–ï–†–û–ú ','–†–µ–ø—É—Ç–∞—Ü–∏—è: –°–ö–ê–ú–ú–ï–†','–†–µ–ø—É—Ç–∞—Ü–∏—è: –ü–µ—Ç—É—Ö','–†–µ–ø—É—Ç–∞—Ü–∏—è: –í–æ–∑–º–æ–∂–Ω–æ –°–∫–∞–º–º–µ—Ä','–†–µ–ø—É—Ç–∞—Ü–∏—è: –ü–ª–æ—Ö–∞—è –†–µ–ø—É—Ç–∞—Ü–∏—è','–†–µ–ø—É—Ç–∞—Ü–∏—è: –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏']
slovo_admin = ['üíô –ü–µ—Ä—Å–æ–Ω–∞–ª GASD','–î–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞. [–∞–¥–º–∏–Ω]','üëë | –ó–≤–∞–Ω–∏–µ: –í–ª–∞–¥–µ–ª–µ—Ü','üî´–Ø–≤–ª—è–µ—Ç—Å—è –°—Ç–∞—Ä—à–∏–º –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º','–Ø–≤–ª—è–µ—Ç—Å—è –º–ª–∞–¥—â–∏–º –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º','üëë–Ø–≤–ª—è–µ—Ç—Å—è –í–ª–∞–¥–µ–ª—å—Ü–µ–º']
slovo_not = ['–Ø–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.','–†–µ–ø—É—Ç–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–µ–Ω(–∞) –≥–∞—Ä–∞–Ω—Ç–æ–º',
             '| –î–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∫–∞–º–µ—Ä–æ–º',
             '–ß–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ!','üìó | coder']



def send_photo_base(message,chat_id,reply_markup):
    for i in app.get_chat_history(chat_id,limit=4):
        if i.text != None and i.from_user.id != app_id:
            text = i.text
        elif i.caption != None and i.from_user.id != app_id:
            text = i.caption
        for i in range(0,4):
            if text.count(slovo_garant[i]) > 0:
                message.reply_photo(photo=photo_garant,quote=True,caption=text,reply_markup=reply_markup)
            else:
                pass
        for i in range(0,6):
            if text.count(slovo_admin[i]) > 0:
                message.reply_photo(photo=photo_admin,quote=True,caption=text,reply_markup=reply_markup)
            else:
                pass
        for i in range(0,7):
            if text.count(slovo_scam[i]) > 0:
                message.reply_photo(photo=photo_scam,quote=True,caption=text,reply_markup=reply_markup)
            else:
                pass
        for i in range(0,5):
            if text.count(slovo_not[i]) > 0:
                message.reply_photo(photo=photo_not_in_base,quote=True,caption=text,reply_markup=reply_markup)
            else:
                pass


def check(bot, message):
    try:
        arg = message.text.split()[1]
        if arg[0] == '@':
            try:
                user_id = bot.get_users(user_ids=arg).id
                btn=InlineKeyboardMarkup([[InlineKeyboardButton('üü¢ –í–µ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ üü¢',url=f'tg://openmessage?user_id={user_id}')]])
                mess = bot.send_message(message.chat.id,'‚ö°Ô∏è –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å! –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: +- 1 —Å–µ–∫—É–Ω–¥–∞ ‚ö°Ô∏è')
                chat_id = choice(chat_ids)
                app.delete_messages(chat_id,[i.id for i in app.get_chat_history(chat_id)])
                app.send_message(chat_id, f'/check {user_id}')
                sleep(1)
                bot.delete_messages(message.chat.id, mess.id)
                send_photo_base(message,chat_id,btn)
                bot.send_message(channel_logs,f'–ú–Ω–µ –ø—Ä–∏—à–µ–ª –ª–æ–≥! –û—Ç–ø—Ä–∞–≤–ª—è–ª {message.from_user.id} –∑–∞–ø—Ä–æ—Å /check')
            except Exception as exo:
                bot.send_message(message.chat.id,f'‚ùóÔ∏è –¢–µ–ª–µ–≥—Ä–∞–º–º –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É ‚ùóÔ∏è \n- - - - - - - - - -\n{exo}')   
                bot.send_message(channel_logs,f'–ú–Ω–µ –ø—Ä–∏—à–µ–ª –ª–æ–≥! –û—Ç–ø—Ä–∞–≤–ª—è–ª {message.from_user.id} –∑–∞–ø—Ä–æ—Å /check')
        elif arg[0] in [str(i) for i in range(0,10)]:
            btn=InlineKeyboardMarkup([[InlineKeyboardButton('üü¢ –í–µ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ üü¢',url=f'tg://openmessage?user_id={arg}')]])
            mess = bot.send_message(message.chat.id,'‚ö°Ô∏è –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å! –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: +- 1 —Å–µ–∫—É–Ω–¥–∞ ‚ö°Ô∏è')
            chat_id = choice(chat_ids)
            app.delete_messages(chat_id,[i.id for i in app.get_chat_history(chat_id)])
            app.send_message(chat_id, f'/check {arg}')
            sleep(1)
            bot.delete_messages(message.chat.id, mess.id)
            send_photo_base(message,chat_id,btn)
            bot.send_message(channel_logs,f'–ú–Ω–µ –ø—Ä–∏—à–µ–ª –ª–æ–≥! –û—Ç–ø—Ä–∞–≤–ª—è–ª {message.from_user.id} –∑–∞–ø—Ä–æ—Å /check')
        else:
            message.reply_text('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–Ω –∞–≥—Ä—É–º–µ–Ω—Ç!', quote=True)
            bot.send_message(channel_logs,f'–ú–Ω–µ –ø—Ä–∏—à–µ–ª –ª–æ–≥! –û—Ç–ø—Ä–∞–≤–ª—è–ª {message.from_user.id} –∑–∞–ø—Ä–æ—Å /check')
        return f'/check {arg}'
    except IndexError:
        bot.send_message(message.chat.id,'‚ùóÔ∏è –ê–≥—Ä—É–º–µ–Ω—Ç –Ω–µ –∑–∞–¥–∞–Ω ‚ùóÔ∏è')
    



def check_you(bot,message):
    arg = message.from_user.id
    btn=InlineKeyboardMarkup([[InlineKeyboardButton('üü¢ –í–µ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ üü¢',url=f'tg://openmessage?user_id={message.from_user.id}')]])
    mess = bot.send_message(message.chat.id,'‚ö°Ô∏è –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å! –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: +- 1 —Å–µ–∫—É–Ω–¥–∞ ‚ö°Ô∏è')
    chat_id = choice(chat_ids)
    app.delete_messages(chat_id,[i.id for i in app.get_chat_history(chat_id)])
    app.send_message(chat_id, f'/check {arg}')
    sleep(1)
    bot.delete_messages(message.chat.id, mess.id)
    send_photo_base(message,chat_id,btn)
    bot.send_message(channel_logs,f'–ú–Ω–µ –ø—Ä–∏—à–µ–ª –ª–æ–≥! –û—Ç–ø—Ä–∞–≤–ª—è–ª {message.from_user.id} –∑–∞–ø—Ä–æ—Å /me')
    return f'/me'

def check_reestr(bot , message):
    try:
        arg = message.text.split()[1]
        if arg[0] == '@':
            try:
                user_id = bot.get_users(user_ids=arg).id
                info = cursor.execute('SELECT baze , proofs FROM garants WHERE user_id = ?',(user_id,)).fetchone()
                if info:
                    baze , proofs = info[0] , info[1]
                    message.reply_photo(photo=photo_in_reestr,quote=True,caption=f'‚úÖ –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–µ—Å—Ç—Ä–µ –≥–∞—Ä–∞–Ω—Ç–æ–≤ ‚úÖ \nüíé –ë–∞–∑–∞ - {baze} \n[üëâ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä—É—Ñ—ã]({proofs})')
                else:
                    message.reply_text('‚ùå –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ.\n –ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–¥–µ–ª–∫–∏ —Å –≥–∞—Ä–∞–Ω—Ç–æ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞.‚ùå',quote=True,reply_markup=klava_resstr)
            except:
                pass
        elif arg[0] in [str(i) for i in range(0,10)]:
            info = cursor.execute('SELECT baze , proofs FROM garants WHERE user_id = ?',(arg,)).fetchone()
            if info:
                baze , proofs = info[0] , info[1]
                message.reply_photo(photo=photo_in_reestr,quote=True,caption=f'‚úÖ –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–µ—Å—Ç—Ä–µ –≥–∞—Ä–∞–Ω—Ç–æ–≤ ‚úÖ \nüíé –ë–∞–∑–∞ - {baze} \n[üëâ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä—É—Ñ—ã]({proofs})')
            else:
                message.reply_text('‚ùå –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ.\n –ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–¥–µ–ª–∫–∏ —Å –≥–∞—Ä–∞–Ω—Ç–æ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞.‚ùå',quote=True,reply_markup=klava_resstr)
    except IndexError:
        pass
def check_resster_me(bot,message):
    id_user = message.from_user.id
    info = cursor.execute('SELECT baze , proofs FROM garants WHERE user_id = ?',(id_user,)).fetchone()
    if info:
        baze , proofs = info[0] , info[1]
        message.reply_photo(photo=photo_in_reestr,quote=True,caption=f'‚úÖ –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–µ—Å—Ç—Ä–µ –≥–∞—Ä–∞–Ω—Ç–æ–≤ ‚úÖ \nüíé –ë–∞–∑–∞ - {baze} \n[üëâ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä—É—Ñ—ã]({proofs})')
    else:
        message.reply_text('‚ùå –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ.\n –ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–¥–µ–ª–∫–∏ —Å –≥–∞—Ä–∞–Ω—Ç–æ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞.‚ùå',quote=True,reply_markup=klava_resstr)
def check_prepiska_me(bot , message):
    try:
        name = bot.get_users(user_ids=message.from_user.id).first_name + bot.get_users(user_ids=message.from_user.id).last_name
    except:
        name = bot.get_users(user_ids=message.from_user.id).first_name
    prepiski=['[ISB]','…™s ô','ùêàùêíùêÅ','IS·ó∑','Ôº©Ôº≥Ôº¢','‰∏®‰∏Ç‰πÉ']
    for i in range(0,len(prepiski)-1):
        if name.count(prepiski[i]) > 0:
            prepiska1 = prepiski[i]
            bot.send_message(message.chat.id,f'**{name} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ—Ä—å–±—É —Å —Å–∫–∞–º–æ–º –∏ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç , –ø–æ—Å—Ç–∞–≤–∏–≤ –≤ –Ω–∏–∫ --–ù–ê–®–£ –ü–†–ï–ü–ò–°–ö–£--**\n - - - - - - - - - - - - - - - \n(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ `{prepiska1}`, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫ —Å–µ–±–µ –≤ –Ω–∏–∫)')
            break
def check_prepiska(bot,message):
    try:
        arg = message.text.split()[1]
        if arg[0] == '@':
            arg = bot.get_users(user_ids=arg).id
        try:
            name = bot.get_users(user_ids=arg).first_name + bot.get_users(user_ids=arg).last_name
        except:
            name = bot.get_users(user_ids=arg).first_name
        prepiski=['[ISB]','…™s ô','ùêàùêíùêÅ','IS·ó∑','Ôº©Ôº≥Ôº¢','‰∏®‰∏Ç‰πÉ']
        for i  in range(0,len(prepiski)-1):
            if name.count(prepiski[i]) > 0:
                bot.send_message(message.chat.id,f'**{name} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ—Ä—å–±—É —Å —Å–∫–∞–º–æ–º –∏ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç , –ø–æ—Å—Ç–∞–≤–∏–≤ –≤ –Ω–∏–∫ --–ù–ê–®–£ –ü–†–ï–ü–ò–°–ö–£--**\n - - - - - - - - - - - - - - - \n(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ `{prepiski[i]}`, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫ —Å–µ–±–µ –≤ –Ω–∏–∫)')
                break
    except IndexError:
        pass
    except UsernameNotOccupied:
        pass